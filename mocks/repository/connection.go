// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/connection.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "go-ddd-ws-template/src/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockConnectionRepository is a mock of ConnectionRepository interface.
type MockConnectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionRepositoryMockRecorder
}

// MockConnectionRepositoryMockRecorder is the mock recorder for MockConnectionRepository.
type MockConnectionRepositoryMockRecorder struct {
	mock *MockConnectionRepository
}

// NewMockConnectionRepository creates a new mock instance.
func NewMockConnectionRepository(ctrl *gomock.Controller) *MockConnectionRepository {
	mock := &MockConnectionRepository{ctrl: ctrl}
	mock.recorder = &MockConnectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionRepository) EXPECT() *MockConnectionRepositoryMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockConnectionRepository) AddClient(client entity.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClient", client)
}

// AddClient indicates an expected call of AddClient.
func (mr *MockConnectionRepositoryMockRecorder) AddClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockConnectionRepository)(nil).AddClient), client)
}

// HandleMessage mocks base method.
func (m *MockConnectionRepository) HandleMessage(client entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockConnectionRepositoryMockRecorder) HandleMessage(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockConnectionRepository)(nil).HandleMessage), client)
}

// RemoveClient mocks base method.
func (m *MockConnectionRepository) RemoveClient(client entity.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveClient", client)
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockConnectionRepositoryMockRecorder) RemoveClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockConnectionRepository)(nil).RemoveClient), client)
}

// UpgradeProtocol mocks base method.
func (m *MockConnectionRepository) UpgradeProtocol(c echo.Context) (entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeProtocol", c)
	ret0, _ := ret[0].(entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeProtocol indicates an expected call of UpgradeProtocol.
func (mr *MockConnectionRepositoryMockRecorder) UpgradeProtocol(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeProtocol", reflect.TypeOf((*MockConnectionRepository)(nil).UpgradeProtocol), c)
}
